- topic: An introduction to algorithms
  abbrev: intro
  slides_link: https://docs.google.com/presentation/d/1vgHy9Y12PzUug5FMtLUQKgInhV8UykYBsT1-EzPUNdc/edit#slide=id.g2666291cd13_0_234
  summary: |
    We begin the class by exploring the definition of computer
    science and by trying to write some basic algorithms.

- topic: Getting started with Scheme
  abbrev: racket-tech
  slides_link: https://docs.google.com/presentation/d/16pNsjHrUEDAFd1Aphf_YZ7u1_eu9mdfcK-eeNeEWAo0/edit#slide=id.g2666291cd13_0_239
  summary: |
    We consider Scheme, the programming language we will use
    throughout the course.
  reading:
    - page: /readings/mathlan.html
    - page: /readings/algorithm-building-blocks.html
    - page: /readings/scamper.html
  lab:
    - page: /labs/mathlan.html
    - page: /labs/scamper-intro.html

- topic: Algorithmic decomposition
  abbrev: decomposition
  slides_link: https://docs.google.com/presentation/d/1uREDJaU-TdvPnr-ldXLELQSNw2XAcDVfjU2vqjv1G9A/edit#slide=id.g2666291cd13_0_234
  summary: |
    We consider a key technique in algorithmic thinking, how one “decomposes” a
    more complex problem or algorithm into simpler ones.
  reading:
    - page: /readings/images.html
    - page: /readings/decomposition.html
  lab:
    - page: /labs/decomposition.html
  todo:
    - Check the images reading to make sure it works with the new model.

- topic: Reading and writing procedures
  abbrev: procedures
  summary: |
    We consider ways to write your own procedures and why you might do so.
    We also explore how one interprets the algorithms others write.
    And we develop some mental models for what happens when we run
    Scheme/Racket programs.
  reading:
    - page: /readings/procedures.html
  lab:
    - page: /labs/procedures.html

- topic: Computation via expressions
  abbrev: expressions
  slides_link: https://docs.google.com/presentation/d/1MH0d29iokwQ5RIGNT2oqT5pGiIkXYs00JWCdZZg7-s8/edit#slide=id.g2666291cd13_0_234
  summary: |
    We look at the fundamental building block of computation in functional
    programming languages, the expression, and build an appropriate model of
    how expressions "compute". 

    NOTE: We forgot to post the second reading, "Mental models of computation," on time. You do not need to include it in your reading response, but we recommend that you read through it carefully on your own as mental models is an essential topic for the course.
  reading:
    - page: /readings/computation-via-expressions.html
    - page: /readings/mental-models.html
  lab:
    - page: /labs/mental-models-of-computation.html


- topic: Expressions and types
  abbrev: exprs-and-types
  slides_link: https://docs.google.com/presentation/d/1rm4fCfh6RlVIq38ky5MUgvXu-_DUriAhZUudAgV5nVk/edit#slide=id.g2666291cd13_0_234
  summary: |
    We explore many of the basic types of values in Scheme, the
    capabilities Scheme provides for working with those types, and
    how one builds more complex expressions.  We also continue 
    building our mental model.
  reading:
    - page: /readings/exprs-and-types.html
    - page: /readings/numbers.html
    - page: /readings/strings.html
    # - page: /readings/symbols.html
  lab:
    - page: /labs/basic-types.html

  todo:
    - Consider adding symbols to the lab.
    - Consider which types reading to use (or combine them).
    - Might do some cleanup; we split numbers and strings in 2024Sp

- topic: Booleans, predicates, and conditionals
  abbrev: booleans
  slides_link: https://docs.google.com/presentation/d/1Q7lZqOF0Cy-PUduYR51wgE4WofYSAg7WFcYjnH9W6Oo/edit#slide=id.g2666291cd13_0_234
  summary: |
    We consider how one writes procedures that make decisions.
  reading:
    - page: /readings/booleans.html
    - page: /readings/conditionals.html
  lab:
    - page: /labs/conditionals.html
  todo:
    - Last semester, we needed two days for this. I'm inserting a pause for breath


- topic: Software engineering fundamentals
  abbrev: software-engineering
  slides_link: https://docs.google.com/presentation/d/1NdEXhLiaS03Pm_OwXIbHgg7I8hjmQ-p38UgJOVEB0Qk/edit#slide=id.g2666291cd13_0_234
  summary: |
    We consider the trifecta of software engineering: documentation, testing, and debugging.  That is, we explore why and how you document your code, why and how you test your code, and how you might find errors in your code.
  reading:
    - page: /readings/documenting-your-code.html
    - page: /readings/unit-testing.html
    - page: /readings/hypothesis-driven-debugging.html
  lab:
    - page: /labs/documentation-and-testing.html

- topic: RGB colors
  abbrev: rgb-colors
  slides_link: https://docs.google.com/presentation/d/1hmDJH5S_0PwXn9TKz2v5bFkHGA3t1X9kmDH9Kp5wc4U/edit#slide=id.g2666291cd13_0_234
  summary: |
    We explore one of the basic color models used by computers.
  reading:
    - page: /readings/design-and-color.html
    - page: /readings/rgb-colors.html
  lab:
    - page: /labs/rgb-colors.html
  todo:
    - Make sure this works with the new model.
    - Combine the labs

- topic: Transforming images
  abbrev: transforming-images
  slides_link: https://docs.google.com/presentation/d/14z5lw6-BlXNzWF_5TAFsvDib7i8W61cGYqcgq-VtRyY/edit#slide=id.g2666291cd13_0_234
  summary: |
    We expand our understanding of RGB transformations to image transformations.
  reading:
    - page: /readings/anonymous-procedures.html
    - page: /readings/transforming-rgb.html
    - page: /readings/transforming-images.html
  lab:
    - page: /labs/transforming-images.html
  todo:
    - Incorporate anonymous procedures. (At least that's the plan.)

- topic: Local bindings
  abbrev: let
  slides_link: https://docs.google.com/presentation/d/1oaiPhaRLYkWpaGFWhZ9E2x5kNHuXVZLw5YfKF_22sVU/edit#slide=id.g2666291cd13_0_234
  summary: |
    We explore issues of redundacy in code and mechanisms for reducing such reducnancy.
  reading:
    - page: /readings/local-bindings.html
  lab:
    - page: /labs/local-bindings.html

- topic: Pair programming
  abbrev: pair-programming
  slides_link: https://docs.google.com/presentation/d/1g2vaMSROaolcP6LVQbdtRx7B0A_Z4oK6xkwASwYNTwA/edit#slide=id.g2666291cd13_0_234
  summary: |
    We explore the whys and hows of working with others.
  reading:
    - title: Diverse Teams Feel Less Comfortable -- and That's Why They Perform Better
      resource: /files/DiverseTeams2016.pdf
    - title: How Pair Programming Really Works (Wray)
      resource: /files/PairProgramming.pdf
  lab:
    - (TBA)

- topic: "Exam #1"
  abbrev: exam-1
  summary: |
    The first core examination.

- topic: Lists
  abbrev: lists
  slides_link: https://docs.google.com/presentation/d/1uJFmfIwFAy1tg3MjWo7tTkkCaVyXRsjW3HhizsXLGYg/edit#slide=id.g2666291cd13_0_234
  summary: |
    We return to Scheme's *list* data structure and some ways to
    use lists to work with collections of data.
  reading:
    - page: /readings/list-basics.html
    - page: /readings/list-transform-generic.html
  lab:
    - page: /labs/list-basics.html
  todo:
    - Do we also include `car`, `cdr`, and `cons` here?  Do we
     perhaps include a separate day?

- topic: Processing lists
  abbrev: processing-lists
  slides_link: https://docs.google.com/presentation/d/19vkdeM3sogD51aW4UVQO7LKENB5EXl5KMO_VOvEH_L0/edit#slide=id.g307c3f5f546_0_0
  summary: |
    We explore ways to use lists to work with collections of drawings 
    using "the big three" list procedures: `map`, `reduce`, and `filter`.
  reading:
    - page: /readings/list-big-three.html
  lab:
    - page: /labs/lists-more.html
  todo:
    - Incorporate sort and tally.
    - Consider incorporating the old /labs/drawing-lists.html

- topic: Style and List Processing Practice
  abbrev: higher-order-functions
  slides_link: https://docs.google.com/presentation/d/1N-AHVkoSJRiXh3XN8MV1b1obc_-T3Otn-R3LeRaUH_E/edit#slide=id.g307c3f5f546_0_0
  summary: |
    We continue practicing list process with the "big three."
    Additionally, we also take the time to consider good style in programming.
  reading:
    - page: /readings/code-style.html
  lab:
    - page: /labs/wrangling-data.html

# - topic: Recursive decomposition
#   abbrev: recursive-decomposition
#   summary: |
#     We continue our exploration of lists through some "finer-grained"
#     operations and how they allow us to think of lists in a "recursive"
#     manner.

# - topic: Introduction to list recursion
#   abbrev: recursion-intro
#   summary: |
#     We begin our exploration of *recursion*, the most general form
#     of repetition available in Scheme.  You can use recursion to
#     both build and iterate over different kinds of values.
#   reading:
#     - page: /readings/list-composition.html
#     - page: /readings/recursion-basics.html

# - topic: Recursion over lists
#   summary: |
#     We continue our introductory exploration of recursion in Scheme.
#   reading:
#     - page: /readings/recursion-basics.html
#     - page: /readings/recursion-magic.html
#   lab:
#     - page: /labs/recursion-basics.html

# - topic: List motions and unit testing
#   summary: |
#     We begin to categorize the different kinds of recursive "motions"
#     over lists we have explored thus far. We also talk how we can
#     better test the functions that we write.

# - topic: Recursion over numbers
#   abbrev: number-recursion
#   summary: |
#     We consider a slightly different kind of recursion, numeric
#     recursion.  In this technique, we once again have procedures
#     call themselves.  However, the parameter that we "simplify" at
#     every step is a number, rather than a list.
#   reading:
#     - page: /readings/numeric-recursion.html
#   lab:
#     - page: /labs/numeric-recursion.html

# - topic: Recursive design
#   abbrev: recursive-design
#   summary: |
#     We consider how we might recognize and utilize recursive
#     decomposition in structures other than lists and numbers.

# - topic: Tail recursion
#   abbrev: tail-recursion
#   summary: |
#     We continue to stretch our brains with recursive thinking.  In 
#     particular, We consider tail recursion, an advanced version of 
#     recursion that is ubiquitous in functional programming.
#   reading:
#     - page: /readings/tail-recursion.html
#     - page: /readings/list-recursion-revisited.html
#   lab:
#     - page: /labs/tail-recursion.html

# - topic: Designing Higher-order functions
#   abbrev: designing-higher-order-functions
#   summary: |
#     We now consider how to design functions that utilize higher-order
#     functions as inputs.

# - topic: "Exam #2"
#   abbrev: exam-2
#   summary: |
#     The second core examination.

# - topic: Structures
#   abbrev: structs
#   summary: |
#     We consider the `struct`, a way to define new types in Scheme.

# # TODO: need to change this to be about dictionaries rather than hash tables

# - topic: Dictionaries and hash tables
#   abbrev: dictionaries
#   summary: |
#     We consider structures that allow us to store information for
#     quick retrieval.
#   reading:
#     - page: /readings/hash-tables.html
#   lab:
#     - page: /labs/hash-tables.html

# - topic: Data modeling
#   abbrev: data-modeling
#   summary: |
#     We consider how we might use an assortment of data structures to
#     model real-world phenomena.

# - topic: TBD theme topic

# - topic: TBD theme topic

# - topic: Project kick-off
#   abbrev: project-kickoff
#   summary: |
#     We introduce the final project and form teams.

# - topic: Vectors
#   abbrev: vectors
#   summary: |
#     We explore vectors, an alternative to lists for storing data.
#     We consider how data are stored in memory.
#   reading:
#     - page: /readings/vectors.html
#   lab:
#     - page: /labs/vectors.html

# - topic: Sequencing and effects
#   abbrev: sequencing-and-effects
#   summary: |
#     We continue to explore vectors and other effectful computation,
#     acknowledging the trade-offs in program understanding when using
#     such constructs.
#   lab:
#     - page: /labs/vectors-continued.html

# - topic: Counting operations
#   abbrev: counting-operations
#   summary: |
#     We explore techniques for analyzing the number of calls made
#     in evaluating procedures, particularly recursive procedures.
#     We consider why such analysis is useful.  We then delve into
#     a common problem: That of finding values in a collection.
#   reading:
#     - page: /readings/analysis.html
#     - page: /readings/searching.html
#   lab:
#     - page: /labs/searching.html

# - topic: Project work day

# - topic: Trees
#   abbrev: trees
#   summary: |
#     We consider a common hierarchial mechanism for structuring data
#     and how to realize it in Scheme.
#   reading:
#     - page: /readings/trees-ex.html
#     #- page: /readings/tree-structs.html
#   lab:
#     - page: /labs/binary-trees.html
#   todo:
#     - Don't forget to add code to draw a tree

# - topic: Tree recursion
#   abbrev: tree-recursion
#   summary: |
#     We consider how to write recursive programs that process trees
#     and other tree-like structures.
#   reading:
#     - page: /readings/tree-recursion.html
#     - page: /readings/binary-search-trees.html
#   lab:
#     - page: /labs/tree-recursion.html

# - topic: "Exam #3"
#   abbrev: exam-3
#   summary: |
#     The third core examination.

# - topic: "Case study: Sorting"
#   abbrev: sorting-lab
#   summary: |
#     We ground our exploration of sorting in some details.
#   reading:
#     - page: /readings/sorting.html
#   lab:
#     - page: /labs/sorting.html

# - topic: Project presentations
#   abbrev: presentations
#   summary: Students present their projects

# - topic: Wrapup
#   abbrev: wrapup
#   summary: |
#     We conclude the course.


