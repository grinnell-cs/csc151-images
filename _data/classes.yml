- topic: An introduction to algorithms
  abbrev: intro
  summary: |
    We begin the class by exploring the definition of computer
    science and by trying to write some basic algorithms.

- topic: Getting started with Scheme
  abbrev: racket-tech
  summary: |
    We consider Scheme, the programming language we will use
    throughout the course.
  reading:
    - page: /readings/mathlan.html
    - page: /readings/algorithm-building-blocks.html
    - page: /readings/scamper.html
  lab:
    - page: /labs/mathlan.html
    - page: /labs/scamper-intro.html

- topic: Algorithmic decomposition
  abbrev: decomposition
  summary: |
    We consider a key technique in algorithmic thinking, how one “decomposes” a
    more complex problem or algorithm into simpler ones.
  reading:
    - page: /readings/images.html
    - page: /readings/decomposition.html
  lab:
    - page: /labs/decomposition.html
  todo:
    - Check the images reading to make sure it works with the new model.

- topic: Reading and writing procedures
  abbrev: procedures
  summary: |
    We consider ways to write your own procedures and why you might do so.
    We also explore how one interprets the algorithms others write.
    And we develop some mental models for what happens when we run
    Scheme/Racket programs.
  reading:
    - page: /readings/procedures.html
  lab:
    - page: /labs/procedures.html

- topic: Computation via expressions
  abbrev: expressions
  summary: |
    We look at the fundamental building block of computation in functional
    programming languages, the expression, and build an appropriate model of
    how expressions "compute".
  reading:
    - page: /readings/computation-via-expressions.html
  lab:
    - page: /labs/mental-models-of-computation.html
    - page: /readings/mental-models.html

- topic: Expressions and types
  abbrev: exprs-and-types
  summary: |
    We explore many of the basic types of values in Scheme, the
    capabilities Scheme provides for working with those types, and
    how one builds more complex expressions.  We also continue 
    building our mental model.
  reading:
    - page: /readings/exprs-and-types.html
    - page: /readings/numbers.html
    - page: /readings/strings.html
    # - page: /readings/symbols.html
  lab:
    - page: /labs/basic-types.html

  todo:
    - Consider adding symbols to the lab.
    - Consider which types reading to use (or combine them).
    - Might do some cleanup; we split numbers and strings in 2024Sp

- topic: Booleans, predicates, and conditionals
  abbrev: booleans
  summary: |
    We consider how one writes procedures that make decisions.
  reading:
    - page: /readings/booleans.html
    - page: /readings/conditionals.html
  lab:
    - page: /labs/conditionals.html
  todo:
    - Last semester, we needed two days for this. I'm inserting a pause for breath

- topic: Software engineering fundamentals
  abbrev: software-engineering
  summary: |
    We consider the trifecta of software engineering: documentation, testing, and debugging.  That is, we explore why and how you document your code, why and how you test your code, and how you might find errors in your code.
  reading:
    - page: /readings/documenting-your-code.html
    - page: /readings/unit-testing.html
    - page: /readings/hypothesis-driven-debugging.html
  lab:
    - page: /labs/documentation-and-testing.html

- topic: RGB colors
  abbrev: rgb-colors
  summary: |
    We explore one of the basic color models used by computers.
  reading:
    - page: /readings/design-and-color.html
    - page: /readings/rgb-colors.html
  lab:
    - page: /labs/rgb-colors.html
  todo:
    - Make sure this works with the new model.
    - Combine the labs

- topic: Transforming images
  abbrev: transforming-images
  summary: |
    We expand our understanding of RGB transformations to image transformations.
  reading:
    - page: /readings/anonymous-procedures.html
    - page: /readings/transforming-rgb.html
    - page: /readings/transforming-images.html
  lab:
    - page: /labs/transforming-images.html
  todo:
    - Incorporate anonymous procedures. (At least that's the plan.)

- topic: Local bindings
  abbrev: let
  summary: |
    We explore issues of redundacy in code and mechanisms for reducing such reducnancy.
  reading:
    - page: /readings/local-bindings.html
  lab:
    - page: /labs/local-bindings.html

- topic: Pair programming
  abbrev: pair-programming
  summary: |
    We explore the whys and hows of working with others.  
  reading:
    - title: How Pair Programming Really Works (Wray)
      resource: /files/PairProgramming.pdf
    - title: Coping with Hitchhikers and Couch Potatoes on Teams (from B. Oakley et. al (2004).  Turning Student Groups into Effective Teams.  <em>Journal of Student-Centered Learning</em> 2 (1).)
      resource: /files/OakleyHitchhikers2004.pdf
    - title: Diverse Teams Feel Less Comfortable -- and That's Why They Perform Better
      resource: /files/DiverseTeams2016.pdf
  lab:
    - (TBA)

- topic: "Exam #1"
  abbrev: exam-1
  summary: |
    The first core examination.

- topic: Lists
  abbrev: lists
  summary: |
    We return to Scheme's *list* data structure and some ways to
    use lists to work with collections of data.
  reading:
    - page: /readings/list-basics.html
    - page: /readings/list-transform-generic.html
  lab:
    - page: /labs/list-basics.html
  todo:
    - Do we also include `car`, `cdr`, and `cons` here?  Do we
     perhaps include a separate day?

- topic: Processing lists
  abbrev: processing-lists
  summary: |
    We explore ways to use lists to work with collections of drawings 
    using "the big three" list procedures: `map`, `reduce`, and `filter`.
  reading:
    - page: /readings/list-big-three.html
  lab:
    - page: /labs/lists-more.html
  todo:
    - Incorporate sort and tally.
    - Consider incorporating the old /labs/drawing-lists.html

- topic: Style and List Processing Practice
  abbrev: higher-order-functions
  summary: |
    We continue practicing list process with the "big three."
    Additionally, we also take the time to consider good style in programming.
  reading:
    - page: /readings/code-style.html
  lab:
    - page: /labs/wrangling-data.html

- topic: Thinking recursively
  abbrev: recursion-intro
  summary: |
    We begin our exploration of *recursion*, the most general form
    of repetition available in Scheme.  You can use recursion to
    both build and iterate over different kinds of values.
  reading:
    - page: /readings/thinking-recursively.html
  lab:
    - page: /labs/pattern-matching-and-recursive-tracing.html

- topic: Introduction to list recursion
  abbrev: recursion-intro
  summary: |
    We begin our exploration of *recursion*, the most general form
    of repetition available in Scheme.  You can use recursion to
    both build and iterate over different kinds of values.
  reading:
    - page: /readings/pattern-matching.html
    - page: /readings/recursion-over-lists.html
  lab:
    - page: /labs/recursion-practice.html

- topic: List motions
  summary: |
    We continue to explore list recursion by examining how we use recursion to
    perform basic motions over lists.
  reading:
    - page: /readings/list-motions.html
  lab:
    - page: /labs/more-list-practice.html

- topic: Recursion over numbers
  abbrev: number-recursion
  summary: |
    We consider a slightly different kind of recursion, numeric
    recursion.  In this technique, we once again have procedures
    call themselves.  However, the parameter that we "simplify" at
    every step is a number, rather than a list.
  reading:
    - page: /readings/recursion-over-numbers.html
  lab:
    - page: /labs/numeric-recursion.html

- topic: Higher-order Recursive Programming
  abbrev: higher-order-recursive-programming
  summary: |
    We combine higher-order functions and recursive programming to implement the "big three" operations over lists.
  reading:
    - (No required reading for today!)
  # lab:
  #   - page: /labs/implementing-the-big-three.html

- topic: Tail Recursion
  summary: |
    We look at an advanced version of recursion that is ubiquitous in functional programming, tail recursion.
  reading:
    - page: /readings/tail-recursion.html
  # lab:
  #   - page: /labs/tail-recursion.html

- topic: Dictionaries
  abbrev: dictionaries
  summary: |
    We consider how we might use list recursion to build structures that allow
    us to store information for quick retrieval.
  reading:
    - page: /readings/association-lists.html
  lab:
    - page: /labs/letter-inventory.html

- topic: Pause for breath
  abbrev: pause-2
  summary: |
    We review in preparation for the second examination.

- topic: "Exam 2"
  abbrev: exam-2
  summary: |
    The second core examination.

- topic: Vectors
  abbrev: vectors
  summary: |
    We explore vectors, an alternative to lists for storing data.
  reading:
    - page: /readings/vectors.html
  lab:
    - page: /labs/vectors.html

- topic: Sequencing and effects
  abbrev: sequencing-and-effects
  summary: |
    We discuss (finally!) what a side-effect is, why they are useful, and how functional programming (correctly) encourages us to moderate their use.
  reading:
    - page: /readings/sequencing-and-effects.html
  lab:
    # - page: /labs/sequencing-and-effects.html

- topic: Randomness
  abbrev: randomness
  summary: |
    We consider Scheme's `random` procedure and how one might use
    that procedure in generating language.
  reading:
    - page: /readings/randomness.html
  lab:
    # - page: /labs/exploring-randomness.html

- topic: Theme day!
  abbrev: theme-day-2
  summary: |
    We dive deeper into how images are represented underneath the hood in anticipation for our final projects.

- topic: Event-driven programming
  abbrev: event-driven-programming
  summary: |
    We examine Scamper's facilities for interactive, media-based programming.

- topic: Project kick-off
  abbrev: project-kick-off
  summary: |
    We kick-off the final project, finalizing topics, forming groups, and building a plan of action!

- topic: Structures
  abbrev: structs
  summary: |
    We consider the `struct`, a way to define new types in Scheme.

- topic: Hierarchical data
  abbrev: hierarchical-dat
  summary: |
    We look at how structures form hierarchical data and how some of the key datatypes of this course form hierarchies, too!

- topic: Trees
  abbrev: trees
  summary: |
    We consider a common hierarchial mechanism for structuring data
    and how to realize it in Scheme.
  reading:
    #- page: /readings/trees-ex.html
    #- page: /readings/tree-structs.html
  lab:
    #- page: /labs/binary-trees.html

- topic: Tree recursion
  abbrev: tree-recursion
  summary: |
    We consider how to write recursive programs that process trees
    and other tree-like structures.
  reading:
    # - page: /readings/tree-recursion.html
    # - page: /readings/binary-search-trees.html
  lab:
    # - page: /labs/tree-recursion.html

- topic: Project work day!
  abbrev: project-work-day
  summary: |
    Before Thanksgiving break, we pause to give everyone time to make substantial progress on their final projects.

- topic: Counting operations
  abbrev: counting-operations
  summary: |
    We explore techniques for analyzing the number of calls made
    in evaluating procedures, particularly recursive procedures.
    We consider why such analysis is useful.  We then delve into
    a common problem: That of finding values in a collection.
  reading:
    # - page: /readings/analysis.html
    # - page: /readings/searching.html
  lab:
    # - page: /labs/searching.html

- topic: Pause for breath
  abbrev: pause-for-breath-3
  summary: |
    We review the material in this final leg of the course before the third exam.

- topic: "Exam 3"
  abbrev: exam-3
  summary: |
    The third core examination.

- topic: "Case study: searching and sorting"
  abbrev: searching-and-sorting
  summary: |
    As a case study of looking at computational complexity, we examine different ways of performing two ubiquitous operations in programming, searching and sorting.

- topic: "Project presentations"
  abbrev: project-presentations

- topic: "Presentation wrap-up and conclusion"
  abbrev: conclusion

